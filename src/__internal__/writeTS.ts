import { ph } from '../ph';
import { typed } from './typed';

type StringOutput = {
  type: 'string';
};

type ObjectOutput = {
  type: 'object';
  pattern?: RegExp;
};

type Output = StringOutput | ObjectOutput;

export type Options = {
  replacer?: (path: string) => string;
  typeName?: string;
  description?: string;
  output?: Output;
};

export const writeTS = async (
  inputPath: string,
  outputPath: string,
  options?: Options,
) =>
  ph(inputPath, outputPath)
    .setConfig({
      typeName: options?.typeName ?? 'FileType',
      annotation: `/**
 * This file was automatically generated by path-typegen.
 * DO NOT MODIFY IT BY HAND. Instead, modify the writeTS function options parameters
 */`,
    })
    .map((path) => options?.replacer?.(path) ?? path)
    .map((path) => typeParser(path, options))
    .write();

const typeParser = (path: string, options?: Options) => {
  if (options?.output?.type === 'object') {
    if (options.output.pattern) {
      const params = [...(path.match(options.output.pattern) || [])];
      const PREFIX = '{\n    ';
      const POSTFIX = '\n  }';
      const obj =
        PREFIX + params.map((param) => `${param}: string`).join('\n') + POSTFIX;

      return typed`{
  path: ${path}
  params: ${obj}
}`;
    }

    return typed`{
  path: ${path}
}`;
  }

  return path;
};
